{"version":3,"sources":["PrayerTimes.js","App.js","reportWebVitals.js","index.js"],"names":["PrayerTimes","prayerTimes","setPrayerTimes","useState","city","setCity","region","setRegion","fetchPrayerTimes","useCallback","async","latitude","longitude","response","fetch","data","json","filteredTimes","Imsak","timings","Fajr","Sunrise","Dhuhr","Sunset","Maghrib","fetchLocationByIP","regionName","lat","lon","error","console","getCurrentPrayer","now","Date","currentTime","getHours","getMinutes","timeToNumber","timeStr","hours","minutes","split","parseInt","times","Object","entries","map","_ref","prayer","time","timeNumber","sort","a","b","i","length","useEffect","React","createElement","className","role","aria-label","_ref3","key","time24","hour","minute","hourInt","convertTo12","getTimeUntilNextPrayer","prayerTimesArr","_ref2","timeDifference","Math","floor","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e4512c3e.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nconst PrayerTimes = () => {\r\n    const [prayerTimes, setPrayerTimes] = useState(null);\r\n    const [city, setCity] = useState(null);\r\n    const [region, setRegion] = useState(null);\r\n\r\n    // calling Aladhan API and input coordinates to fetch time \r\n    const fetchPrayerTimes = useCallback(async (latitude, longitude) => {\r\n        const response = await fetch(\r\n            `http://api.aladhan.com/v1/timings?latitude=${latitude}&longitude=${longitude}&method=2`\r\n        );\r\n        const data = await response.json();\r\n\r\n        const filteredTimes = {\r\n            Imsak: data.data.timings.Imsak,\r\n            Fajr: data.data.timings.Fajr,\r\n            Sunrise: data.data.timings.Sunrise,\r\n            Dhuhr: data.data.timings.Dhuhr,\r\n            Sunset: data.data.timings.Sunset,\r\n            Maghrib: data.data.timings.Maghrib,\r\n        };\r\n        setPrayerTimes(filteredTimes);\r\n    }, []);\r\n\r\n    // Fetch location by IP and call fetchPrayerTimes with coordinates\r\n    const fetchLocationByIP = useCallback(async () => {\r\n        try {\r\n            const response = await fetch(\"http://ip-api.com/json/\");\r\n            const data = await response.json();\r\n            setCity(data.city);\r\n            setRegion(data.regionName);\r\n\r\n            const { lat: latitude, lon: longitude } = data;\r\n            fetchPrayerTimes(latitude, longitude);\r\n        } catch (error) {\r\n            console.error(\"Error fetching IP location:\", error);\r\n        }\r\n    }, [fetchPrayerTimes]);\r\n\r\n    const convertTo12 = (time24) => {\r\n        const [hour, minute] = time24.split(':');\r\n        const hourInt = parseInt(hour, 10);\r\n        const ampm = hourInt >= 12 ? 'pm' : 'am';\r\n        const hour12 = hourInt % 12 || 12;\r\n        return `${hour12}:${minute} ${ampm}`;\r\n    };\r\n\r\n    const getCurrentPrayer = () => {\r\n        if (!prayerTimes) return null;\r\n        const now = new Date();\r\n        const currentTime = now.getHours() * 100 + now.getMinutes();\r\n        \r\n        const timeToNumber = (timeStr) => {\r\n            const [hours, minutes] = timeStr.split(':');\r\n            return parseInt(hours) * 100 + parseInt(minutes);\r\n        };\r\n\r\n        const times = Object.entries(prayerTimes).map(([prayer, time]) => ({\r\n            prayer,\r\n            timeNumber: timeToNumber(time)\r\n        }));\r\n\r\n        times.sort((a, b) => a.timeNumber - b.timeNumber);\r\n        \r\n        for (let i = times.length - 1; i >= 0; i--) {\r\n            if (currentTime >= times[i].timeNumber) {\r\n                return times[i].prayer;\r\n            }\r\n        }\r\n        return times[times.length - 1].prayer;\r\n    };\r\n\r\n    const timeToNumber = (timeStr) => {\r\n        const [hours, minutes] = timeStr.split(':');\r\n        return parseInt(hours) * 100 + parseInt(minutes);\r\n    };\r\n\r\n    const getTimeUntilNextPrayer = () => {\r\n        if (!prayerTimes) return null;\r\n        const now = new Date();\r\n        const currentTime = now.getHours() * 100 + now.getMinutes();\r\n    \r\n        const prayerTimesArr = Object.entries(prayerTimes).map(([prayer, time]) => ({\r\n            prayer,\r\n            timeNumber: timeToNumber(time),\r\n        }));\r\n    \r\n        prayerTimesArr.sort((a, b) => a.timeNumber - b.timeNumber);\r\n    \r\n        for (let i = 0; i < prayerTimesArr.length; i++) {\r\n            if (currentTime < prayerTimesArr[i].timeNumber) {\r\n                let timeDifference = prayerTimesArr[i].timeNumber - currentTime;\r\n                let hours = Math.floor(timeDifference / 100);\r\n                let minutes = timeDifference % 100;\r\n\r\n                // adjust minutes \r\n                if (minutes >= 60) {\r\n                    minutes -= 60;\r\n                    hours += 1;\r\n                }\r\n\r\n                return `${hours}h ${minutes}m`;\r\n            }\r\n        }\r\n    \r\n        return 'Next day'; \r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchLocationByIP();\r\n    }, [fetchLocationByIP]);\r\n\r\n    return (\r\n        <div className=\"prayer-container\">\r\n            <div className=\"prayer-card\">\r\n                <div className=\"card-header\">\r\n                    <h1 className=\"card-title\">Shia Islam Prayer Times</h1>\r\n                    {city && region && (\r\n                        <div className=\"location\">\r\n                          <span role=\"img\" aria-label=\"pin\">üìç</span> {city}, {region}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                \r\n                <div className=\"card-content\">\r\n                    {prayerTimes ? (\r\n                        <div className=\"prayer-list\">\r\n                            {Object.entries(prayerTimes).map(([prayer, time]) => (\r\n                                <div\r\n                                    key={prayer}\r\n                                    className={`prayer-item ${prayer === getCurrentPrayer() ? 'active' : ''}`}\r\n                                >\r\n                                    <div className=\"prayer-name\">\r\n                                    <span role=\"img\" aria-label=\"clock\">üïí</span> {prayer}\r\n                                    </div>\r\n                                    <div className=\"prayer-time\">\r\n                                        {convertTo12(time)}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"loading\">\r\n                            <div className=\"loading-spinner\"></div>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"next-prayer-time\">\r\n                        <h3>Time until next prayer: {getTimeUntilNextPrayer()}</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrayerTimes;\r\n","import React from 'react';\nimport './App.css';\nimport PrayerTimes from './PrayerTimes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Islamic Prayer Times</h1>\n      <PrayerTimes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}